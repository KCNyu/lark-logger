package main

import (
	"fmt"
	"log"
	"time"

	larklogger "github.com/KCNyu/lark-logger"
)

func main() {
	// Create Lark client - only webhook URL required
	client := larklogger.NewClient(
		"https://open.feishu.cn/open-apis/bot/v2/hook/a384fb71-c57b-414f-98b4-ce72aaad5073",
		larklogger.WithTimeout(10*time.Second),
		larklogger.WithRetry(3, 1*time.Second),
	)

	// Create Logger instance - optional service configuration
	logger := larklogger.NewLogger(client,
		larklogger.WithService("api-gateway"),
		larklogger.WithEnv("production"),
		larklogger.WithHostname("web-server-01"),
		larklogger.WithTitle("ðŸš€ System Monitor"),
	)

	// Send Info level log with rich context (traditional way)
	logger.Info("API Gateway initialized successfully", map[string]interface{}{
		"port":     8080,
		"version":  "2.1.0",
		"features": []string{"authentication", "rate_limiting", "metrics"},
		"config": map[string]interface{}{
			"database": "postgresql",
			"cache":    "redis",
			"ssl":      true,
		},
		"uptime": "0s",
	})

	// Send logs using new Infof/Warnf/Errorf format (simplified)
	logger.Infof("Service health check", "status", "healthy", "response_time", "120ms", "uptime", "2h30m")
	logger.Warnf("Memory usage approaching threshold", "usage", "87%", "threshold", "85%", "recommendation", "consider horizontal scaling")
	logger.Errorf("Database connection pool exhausted", "error", "connection timeout after 30s", "retry_count", 3, "pool_size", 20)

	// Send simple text message
	err := client.SendText("ðŸš€ Lark Logger Demo - All systems operational!")
	if err != nil {
		log.Printf("Failed to send text message: %v", err)
	}

	// Build and send custom enhanced card
	card := larklogger.NewCardBuilder().
		SetHeader("ðŸŽ‰ System Health Report", "green").
		AddSection("**Comprehensive system status overview**\n\nGenerated by Lark Logger SDK").
		AddKeyValueList("Core Features", map[string]interface{}{
			"Enhanced formatting": "âœ…",
			"Multi-level logging": "âœ…",
			"Structured data":     "âœ…",
			"Retry mechanism":     "âœ…",
			"Mobile optimization": "âœ…",
		}).
		AddStatusBadge("success", "All monitoring systems operational").
		AddMetricsGrid("Performance Metrics", map[string]interface{}{
			"CPU Usage":     "45%",
			"Memory":        "67%",
			"Disk Space":    "23%",
			"Network I/O":   "12%",
			"Response Time": "120ms",
		}).
		Build()

	err = client.SendCard(card)
	if err != nil {
		log.Printf("Failed to send custom card: %v", err)
	}

	fmt.Println("ðŸŽŠ All messages sent successfully! Check your Lark workspace.")
}
